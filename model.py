# -*- coding: utf-8 -*-
"""ecommerce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11-PycHzZpNbaA-g4-z2spEvZdTBZYgb6
"""

import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.linear_model import LinearRegression,LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score,mean_squared_error,accuracy_score
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
import random

df = pd.read_csv('train.csv')
df.drop(['Offer %'],inplace=True,axis=1)
df.drop(['id'],inplace=True,axis=1)
df.drop(['title'],inplace=True,axis=1)
df['maincateg'] = df['maincateg'].fillna('Women')
df['norating1'].fillna(df['norating1'].median(), inplace=True)
df['noreviews1'].fillna(df['noreviews1'].median(), inplace=True)
df['star_3f'].fillna(df['star_3f'].median(), inplace=True)
df['star_5f'].fillna(df['star_5f'].median(), inplace=True)
df['star_4f'].fillna(df['star_4f'].median(), inplace=True)
df['star_3f'].fillna(df['star_3f'].median(), inplace=True)
df.drop_duplicates(inplace=True)
q1_rating = df['Rating'].quantile(0.25)
q3_rating = df['Rating'].quantile(0.75)
IQR = q3_rating - q1_rating
lower_limit_rating = q1_rating - 1.5 * IQR
upper_limit_rating = q3_rating + 1.5 * IQR
df['Rating'] = df['Rating'].clip(lower=lower_limit_rating,upper=upper_limit_rating)
q1_price1 = df['price1'].quantile(0.25)
q3_price1 = df['price1'].quantile(0.75)
IQR = q3_price1 - q1_price1

lower_limit_price1 = q1_price1 - 1.5 * IQR
upper_limit_price1 = q3_price1 + 1.5 * IQR

df['price1'] = df['price1'].clip(lower=lower_limit_price1,upper=upper_limit_price1)

q1_actprice1 = df['actprice1'].quantile(0.25)
q3_actprice1 = df['actprice1'].quantile(0.75)
IQR = q3_actprice1 - q1_actprice1

lower_limit_actprice1 = q1_actprice1 - 1.5 * IQR
upper_limit_actprice1 = q3_actprice1 + 1.5 * IQR

df['actprice1'] = df['actprice1'].clip(lower=lower_limit_actprice1,upper=upper_limit_actprice1)

q1_norating1 = df['norating1'].quantile(0.25)
q3_norating1 = df['norating1'].quantile(0.75)
IQR = q3_norating1 - q1_norating1

lower_limit_norating1 = q1_norating1 - 1.5 * IQR
upper_limit_norating1 = q3_norating1 + 1.5 * IQR

df['norating1'] = df['norating1'].clip(lower=lower_limit_norating1,upper=upper_limit_norating1)

q1_noreviews1 = df['noreviews1'].quantile(0.25)
q3_noreviews1 = df['noreviews1'].quantile(0.75)
IQR = q3_noreviews1 - q1_noreviews1

lower_limit_noreviews1 = q1_noreviews1 - 1.5 * IQR
upper_limit_noreviews1 = q3_noreviews1 + 1.5 * IQR

df['noreviews1'] = df['noreviews1'].clip(lower=lower_limit_noreviews1,upper=upper_limit_noreviews1)

q1_star_5f = df['star_5f'].quantile(0.25)
q3_star_5f = df['star_5f'].quantile(0.75)
IQR = q3_star_5f - q1_star_5f

lower_limit_star_5f = q1_star_5f - 1.5 * IQR
upper_limit_star_5f = q3_star_5f + 1.5 * IQR

df['star_5f'] = df['star_5f'].clip(lower=lower_limit_star_5f,upper=upper_limit_star_5f)

q1_star_4f = df['star_4f'].quantile(0.25)
q3_star_4f = df['star_4f'].quantile(0.75)
IQR = q3_star_4f - q1_star_4f

lower_limit_star_4f = q1_star_4f - 1.5 * IQR
upper_limit_star_4f = q3_star_4f + 1.5 * IQR

df['star_4f'] = df['star_4f'].clip(lower=lower_limit_star_4f,upper=upper_limit_star_4f)

q1_star_3f = df['star_3f'].quantile(0.25)
q3_star_3f = df['star_3f'].quantile(0.75)
IQR = q3_star_3f - q1_star_3f

lower_limit_star_3f = q1_star_3f - 1.5 * IQR
upper_limit_star_3f = q3_star_3f + 1.5 * IQR

df['star_3f'] = df['star_3f'].clip(lower=lower_limit_star_3f,upper=upper_limit_star_3f)

q1_star_2f = df['star_2f'].quantile(0.25)
q3_star_2f = df['star_2f'].quantile(0.75)
IQR = q3_star_2f - q1_star_2f

lower_limit_star_2f = q1_star_2f - 1.5 * IQR
upper_limit_star_2f = q3_star_2f + 1.5 * IQR

df['star_2f'] = df['star_2f'].clip(lower=lower_limit_star_2f,upper=upper_limit_star_2f)

q1_star_1f = df['star_1f'].quantile(0.25)
q3_star_1f = df['star_1f'].quantile(0.75)
IQR = q3_star_1f - q1_star_1f

lower_limit_star_1f = q1_star_1f - 1.5 * IQR
upper_limit_star_1f = q3_star_1f + 1.5 * IQR

df['star_1f'] = df['star_1f'].clip(lower=lower_limit_star_1f,upper=upper_limit_star_1f)
def clean_data(df):
    label_encoder_m = LabelEncoder()
    label_encoder_p = LabelEncoder()
    df['maincateg'] = label_encoder_m.fit_transform(df['maincateg'])
    df['platform'] = label_encoder_p.fit_transform(df['platform'])
    minmax_scaler = MinMaxScaler()
    df['maincateg'] = minmax_scaler.fit_transform(df['maincateg'].values.reshape(-1, 1))
    df['price1'] = minmax_scaler.fit_transform(df['price1'].values.reshape(-1, 1))
    df['actprice1'] = minmax_scaler.fit_transform(df['actprice1'].values.reshape(-1, 1))
    df['norating1'] = minmax_scaler.fit_transform(df['norating1'].values.reshape(-1, 1))
    df['noreviews1'] = minmax_scaler.fit_transform(df['noreviews1'].values.reshape(-1, 1))
    df['star_5f'] = minmax_scaler.fit_transform(df['star_5f'].values.reshape(-1, 1))
    df['star_4f'] = minmax_scaler.fit_transform(df['star_4f'].values.reshape(-1, 1))
    df['star_3f'] = minmax_scaler.fit_transform(df['star_3f'].values.reshape(-1, 1))
    df['star_2f'] = minmax_scaler.fit_transform(df['star_2f'].values.reshape(-1, 1))
    df['star_1f'] = minmax_scaler.fit_transform(df['star_1f'].values.reshape(-1, 1))
    df['Rating'] = minmax_scaler.fit_transform(df['Rating'].values.reshape(-1, 1))
    return df
df = clean_data(df)


x = df.drop(['fulfilled1'],axis=1)
y = df['fulfilled1']
rfc = RandomForestClassifier()
rfc.fit(x,y)